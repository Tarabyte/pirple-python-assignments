"""
Create a class called "Vehicle" and methods that allow you to set the "Make", "Model", "Year,", and "Weight".
The class should also contain a "NeedsMaintenance" boolean that defaults to False, and and "TripsSinceMaintenance" Integer that defaults to 0.

Next an inheritance classes from Vehicle called "Cars".
The Cars class should contain a method called "Drive" that sets the state of a boolean isDriving to True.
It should have another method called "Stop" that sets the value of isDriving to false.

Switching isDriving from true to false should increment the "TripsSinceMaintenance" counter.
And when TripsSinceMaintenance exceeds 100, then the NeedsMaintenance boolean should be set to true.

Add a "Repair" method to either class that resets the TripsSinceMaintenance to zero, and NeedsMaintenance to false.

Create 3 different cars, using your Cars class, and drive them all a different number of times.
Then print out their values for Make, Model, Year, Weight, NeedsMaintenance, and TripsSinceMaintenance

Extra:
Create a Planes class that is also an inheritance class from Vehicle.
Add methods to the Planes class for Flying and Landing (similar to Driving and Stopping), but different in one respect:
Once the NeedsMaintenance boolean gets set to true, any attempt at flight should be rejected (return false),
and an error message should be printed saying that the plane can't fly until it's repaired.
"""


def setters(*names):
    """
    Yay! Metaprogramming FTW
    This decorator generates setters
    """
    def make_setter(name):
        prop = name.capitalize()

        return lambda self, value: setattr(self, prop, value)

    def add_setters(cls):
        for name in names:
            setattr(cls, f"set{name.capitalize()}", make_setter(name))
        return cls

    return add_setters


@setters('make', 'model', 'year', 'weight')
class Vehicle:
    """
    Generic Vehicle Class
    """
    # Max trips a vehicle could operate w/o maintenances
    MaxTripsWOMaintenances = 100

    def __init__(self, make='', model='', year=2019, weight=0):
        self.Make = make
        self.Model = model
        self.Year = year
        self.Weight = weight
        self.NeedsMaintenance = False
        self.TripsSinceMaintenance = 0

    # common setters are generated by nice and shinny decorator
    # Logic

    def addTrip(self):
        self.TripsSinceMaintenance += 1
        if self.TripsSinceMaintenance > type(self).MaxTripsWOMaintenances:
            self.NeedsMaintenance = True

    def Repair(self):
        """Clear NeedsMaintenance flag and sets TripsSinceMaintenance to 0"""
        self.NeedsMaintenance = False
        self.TripsSinceMaintenance = 0

    def __str__(self):
        return f'Model: {self.Model}, Make: {self.Make}, year: {self.Year}, \
weight: {self.Weight}, Trips: {self.TripsSinceMaintenance}, Needs Maintenance: {self.NeedsMaintenance}'


class Cars(Vehicle):
    """
    Cars Class extends Vehicle
    """

    def __init__(self, make='', model='', year=2019, weight=0):
        super().__init__(make=make, model=model, year=year, weight=weight)
        self.isDriving = False

    # Logic
    def Drive(self):
        """Sets driving flag to be true"""
        self.isDriving = True

    def Stop(self):
        """Sets driving flag to be false and increment trip counters"""
        self.isDriving = False
        self.addTrip()


class Planes(Vehicle):
    """
    Plane Class exntes Vehicle
    """
    # Let's require maintenance after 20 trips
    MaxTripsWOMaintenances = 20

    def __init__(self, make='', model='', year=2019, weight=0):
        super().__init__(make=make, model=model, year=year, weight=weight)
        self.isFlying = False

    # logic

    def Fly(self):
        """Sets flying flag to be true if the plane does not require maintenance"""
        if self.NeedsMaintenance:
            print("The plane can't fly until it's repaired")
            return False
        else:
            self.isFlying = True
            return True

    def Land(self):
        """Sets flying flag to be false and increments trip counter"""
        self.isFlying = False
        self.addTrip()


"""
Testing Cars
"""
bmw = Cars(make='BMW', model='BMW 2 Series', year=2019, weight=2010)
corolla = Cars(make='Toyota', model='Corolla', year=2018, weight=2400)
acura = Cars(make='Acura', model='MDX', year=2016, weight=2123)


def drive(car, times):
    """Utility function to drive a car multiple times"""
    for i in range(times):
        car.Drive()
        car.Stop()


drive(bmw, 100)
print(bmw)

drive(corolla, 101)
print(corolla)
corolla.Repair()
print(corolla)

drive(acura, 200)
print(acura)


"""
Testing Planes
"""
plane = Planes()

# fly until maintaince
while not plane.NeedsMaintenance:
    plane.Fly()
    plane.Land()

print(f'A plane needs maintaince after {plane.TripsSinceMaintenance} trips')

# failed attempt to fly w/o maintaince
print(f'Should be False {plane.Fly()}')

plane.Repair()
print(f'Should be True {plane.Fly()}')
